using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class InventoryUI : MonoBehaviour
{
    public Text itemText;
    public Button useButton;
    public Button discardButton;
    public Dropdown sortDropdown;
    public InputField filterInputField;

    private List<Item> inventoryItems = new List<Item>(); // list of inventory items
    private List<Item> filteredItems = new List<Item>(); // lists of filtered items
    private Item selectedItem; // selected item

    // define sorting criteria
    private enum SortCriteria
    {
        Name,
        Type,
        Quantity
    }

    // 
    void Start()
    {
        // initialize sort dropdown options
        sortDropdown.options.Clear();
        sortDropdown.options.Add(new Dropdown.OptionData("Name"));
        sortDropdown.options.Add(new Dropdown.OptionData("Type"));
        sortDropdown.options.Add(new Dropdown.OptionData("Quantity"));

        // add listeners to use and discard button
        useButton.onClick.AddListener(OnUseButtonClicked);
        discardButton.onClick.AddListener(OnDiscardButtonClicked);

        // add listener to sort dropdown
        sortDropdown.onValueChanged.AddListener(OnSortDropdownValueChanged);

        // add listener to filter input field
        filterInputField.onValueChanged.AddListener(OnFilterInputFieldValueChanged);

        // put some initial items in inventory
        inventoryItems.Add(new Item("Potion", "Health", 10));
        inventoryItems.Add(new Item("Antidote", "Status", 5));
        inventoryItems.Add(new Item("Escape Rope", "Escape", 3));

        // update UI display
        UpdateInventoryUI();
    }

    // update inventory UI display
    void UpdateInventoryUI()
    {
        // sort inventory items based on the selected sorting criteria
        SortCriteria sortCriteria = (SortCriteria)sortDropdown.value;
        switch (sortCriteria)
        {
            case SortCriteria.Name:
                inventoryItems.Sort((a, b) => a.name.CompareTo(b.name));
                break;
            case SortCriteria.Type:
                inventoryItems.Sort((a, b) => a.type.CompareTo(b.type));
                break;
            case SortCriteria.Quantity:
                inventoryItems.Sort((a, b) => a.quantity.CompareTo(b.quantity));
                break;
        }

        // update the filtered items list
        string filterValue = filterInputField.text.ToLower();
        filteredItems.Clear();
        if (string.IsNullOrEmpty(filterValue))
        {
            filteredItems.AddRange(inventoryItems);
        }
        else
        {
            filteredItems.AddRange(inventoryItems.FindAll(item => item.name.ToLower().Contains(filterValue)));
        }

        // update UI text with the filtered items
        string itemsText = "";
        foreach (Item item in filteredItems)
        {
            itemsText += $"{item.name} ({item.type}) - Quantity: {item.quantity}\n";
        }
        itemText.text = itemsText;
    }

    // if use button is clicked call it back
    void OnUseButtonClicked()
    {
        if (selectedItem != null)
        {
            Debug.Log($"Using item: {selectedItem.name}");
        }
    }

    // if use button is clicked call it back
    void OnDiscardButtonClicked()
    {
        if (selectedItem != null)
        {
            Debug.Log($"Discarding item: {selectedItem.name}");
        }
    }

        // sort dropdown callback if value changed
    void OnSortDropdownValueChanged(int value)
    {
        // update UI display
        UpdateInventoryUI();
    }
}

