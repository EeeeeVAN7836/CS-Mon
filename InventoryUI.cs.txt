using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class InventoryUI : MonoBehaviour
{
    public Text itemText;
    public Text itemDescriptionText;
    public Button useButton;
    public Button discardButton;
    public Dropdown sortDropdown;
    public InputField filterInputField;
    public Dropdown categoryDropdown;

    private List<Item> inventoryItems = new List<Item>(); // List to store inventory items
    private List<Item> filteredItems = new List<Item>(); // List to store filtered items
    private List<Item> categorizedItems = new List<Item>(); // List to store categorized items
    private Item selectedItem; // Currently selected item

    // Enum to define sorting criteria
    private enum SortCriteria
    {
        Name,
        Type,
        Quantity
    }

    // Enum to define item categories
    private enum ItemCategory
    {
        All,
        Healing,
        Battle,
        Status,
        Escape
    }

    // Start is called before the first frame update
    void Start()
    {
        // Initialize the sort dropdown options
        sortDropdown.options.Clear();
        sortDropdown.options.Add(new Dropdown.OptionData("Name"));
        sortDropdown.options.Add(new Dropdown.OptionData("Type"));
        sortDropdown.options.Add(new Dropdown.OptionData("Quantity"));

        // Initialize the category dropdown options
        categoryDropdown.options.Clear();
        categoryDropdown.options.Add(new Dropdown.OptionData("All"));
        categoryDropdown.options.Add(new Dropdown.OptionData("Healing"));
        categoryDropdown.options.Add(new Dropdown.OptionData("Battle"));
        categoryDropdown.options.Add(new Dropdown.OptionData("Status"));
        categoryDropdown.options.Add(new Dropdown.OptionData("Escape"));

        // Add listeners to the buttons
        useButton.onClick.AddListener(OnUseButtonClicked);
        discardButton.onClick.AddListener(OnDiscardButtonClicked);

        // Add listener to the sort dropdown
        sortDropdown.onValueChanged.AddListener(OnSortDropdownValueChanged);

        // Add listener to the filter input field
        filterInputField.onValueChanged.AddListener(OnFilterInputFieldValueChanged);

        // Add listener to the category dropdown
        categoryDropdown.onValueChanged.AddListener(OnCategoryDropdownValueChanged);

        // Populate the inventory with initial items (example)
        inventoryItems.Add(new Item("Potion", "Healing", 10, "A medicine that heals a Pokemon by 20 HP."));
        inventoryItems.Add(new Item("Antidote", "Status", 5, "A spray-type medicine that heals a Pokemon of poisoning."));
        inventoryItems.Add(new Item("Escape Rope", "Escape", 3, "A long and durable rope. Use it to escape instantly from a cave or a dungeon."));

        // Update the UI display
        UpdateInventoryUI();
    }

    // Update the inventory UI display
    void UpdateInventoryUI()
    {
        // Sort the inventory items based on the selected sorting criteria
        SortCriteria sortCriteria = (SortCriteria)sortDropdown.value;
        switch (sortCriteria)
        {
            case SortCriteria.Name:
                inventoryItems.Sort((a, b) => a.name.CompareTo(b.name));
                break;
            case SortCriteria.Type:
                inventoryItems.Sort((a, b) => a.type.CompareTo(b.type));
                break;
            case SortCriteria.Quantity:
                inventoryItems.Sort((a, b) => a.quantity.CompareTo(b.quantity));
                break;
        }

        // Update the filtered items list based on the filter input field value
        string filterValue = filterInputField.text.ToLower();
        filteredItems.Clear();
        foreach (Item item in inventoryItems)
        {
            if (item.name.ToLower().Contains(filterValue))
            {
                filteredItems.Add(item);
            }
